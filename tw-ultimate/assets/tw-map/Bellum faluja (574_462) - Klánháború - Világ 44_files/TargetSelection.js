var TargetSelection; !function () { "use strict"; TargetSelection = function (t) { var e = this; this.$container = null, this.on_confirm_village = function (t) { }, this.request_id = 0, this.selected_index = null, this.num_villages = 0, this.page_limit = null, this.last_attacked = null, this.autocomplete_visible = !1, this.ie_compatibility_mode = !0, this.confirmed_village_data = !1, this.read_only = !1, this.clicked_button = "attack", this.autocomplete_wrapper = null, this.input_text_field = null, this.script_watcher = null, this.script_old_x = "", this.script_old_y = "", this.construct = function (t) { var i = $(t); this.$container = i, this.input_text_field = i.find("input[type=text]"), this.initAutoComplete(), this.changeSearchType.call(i.find("input[type=radio]:checked"), !1), this.page_limit = Math.min(Math.max(Math.round(($(window).height() - this.input_text_field.offset().top) / 50), 5), 10), this.setAutoCompleteWrapperPosition(), this.input_text_field.on("input", function () { e.ie_compatibility_mode = !1, e.fetchVillages() }).on("keyup", e.textFieldKeyUp).on("keydown", e.textFieldKeyDown).on("remove", e.destroy), i.find("input[type=radio]").on("change", this.changeSearchType), this.input_text_field.parents("form").on("submit", this.beforeSubmit), $(window).on("click", this.onWindowClick), i.find(".btn").on("click", function () { e.clicked_button = $(this).attr("name") }); var l = i.data("on-choice"); l && this.setConfirmHook(l) }, this.destroy = function () { clearInterval(e.script_watcher), $(window).off("click", e.onWindowClick), this.input_text_field = null }, this.onWindowClick = function () { e.autocomplete_visible && e.hideAutoCompleteWrapper() }, this.initAutoComplete = function () { this.$container.find(".target-input-autocomplete").autocomplete({ minLength: 2, source: UI.AutoComplete.source }), this.input_text_field.on("autocompleteselect", function (t, i) { e.fetchVillages({ input: i.item.value }) }) }, this.initScriptCompatibility = function () { clearInterval(this.script_watcher), this.script_watcher = setInterval(this.checkForScriptChange, 100) }, this.checkForScriptChange = function () { var t = $("#inputx").val(), i = $("#inputy").val(), l = e.confirmed_village_data ? e.confirmed_village_data.x : "", a = e.confirmed_village_data ? e.confirmed_village_data.y : ""; t && i && (t !== l || i !== a) && (clearInterval(e.script_watcher), e.setVillageByCoordinates(t, i, function () { $("#inputx").val(""), $("#inputy").val(""), e.initScriptCompatibility() })) }, this.setReadOnly = function () { this.read_only = !0 }, this.setLastAttacked = function (t) { this.last_attacked = t, this.$container.find(".target-last-attacked").show().on("click", function (t) { t.preventDefault(), e.confirmVillage(e.getVillageDiv(e.last_attacked)) }) }, this.enableQuickButton = function (t, e) { $(".target-" + t).show().on("click", function (t) { TargetSelection.loadTargetsPopup(t, e) }) }, this.setVillageByCoordinates = function (t, i, l) { this.fetchVillages({ type: "coord", input: t + "|" + i }, function (t) { t.villages.length && e.confirmVillage(e.getVillageDiv(t.villages[0])), "function" == typeof l && l() }) }, this.setVillageByData = function (t) { this.confirmVillage(e.getVillageDiv(t)) }, this.beforeSubmit = function () { var t = $("#inputx"), i = $("#inputy"), l = e.$container.find(".target-input .village-item"); if (l.length) { var a = l.data("village_data"); t.val(a.x), i.val(a.y) } var n, o = e.$container.find("input[type=text]").val(); return (n = o.match(/^([0-9]{1,3})\|([0-9]{1,3})$/)) && (t.val(n[1]), i.val(n[2])), !0 }, this.changeSearchType = function (t) { var i, l = $(this), a = l.closest(".target-select").find("input[type=text]"); switch (l.val()) { case "coord": i = "123|456"; break; case "village_name": i = "Falunév"; break; case "player_name": i = "Játékosnév" }a.attr("placeholder", i).data("search-type", l.val()), e.clearVillages(), "player_name" === l.val() ? (a.autocomplete("enable"), a.autocomplete("search")) : a.autocomplete("disable"), t !== !1 && a.focus() }, this.clearVillages = function () { this.hideAutoCompleteWrapper(), this.removeConfirmedVillage() }, this.fetchVillages = function (t, i) { var l = { ajax: "target_selection", input: this.$container.find("input[type=text]").val(), type: this.$container.find("input[type=radio]:checked").val(), request_id: ++this.request_id, limit: this.page_limit, offset: 0 }; l = $.extend(l, t), 0 !== l.input.length && ("undefined" == typeof i && (i = function (t) { e.handleVillagesData(t) }), TribalWars.get("api", l, i)) }, this.handleVillagesData = function (t) { if (t.request_id === this.request_id) { var i = this.getAutoCompleteWrapper(); if (this.hideAutoCompleteWrapper(), this.num_villages = t.villages.length + t.offset, 0 === t.offset ? (this.selected_index = null, i.empty()) : i.find(".village-more").remove(), 0 !== t.villages.length) { if (this.showAutoCompleteWrapper(), $.each(t.villages, function (t, l) { i.append(e.getVillageDiv(l)) }), t.more) { var l = $('<div class="village-item village-more">Mutass többet</div>').on("click", function (t) { t.stopPropagation(), e.loadMoreVillages() }); i.append(l) } this.setAutoCompleteWrapperPosition() } } }, this.showAutoCompleteWrapper = function () { this.getAutoCompleteWrapper().show(), this.autocomplete_visible = !0 }, this.hideAutoCompleteWrapper = function () { "player_name" === this.$container.find(".input[type=radio]:checked").val() && this.input_text_field.autocomplete("enable"), this.getAutoCompleteWrapper().hide(), this.autocomplete_visible = !1 }, this.getAutoCompleteWrapper = function () { return this.autocomplete_wrapper || (this.autocomplete_wrapper = $('<div class="target-select-autocomplete"></div>').appendTo("body")), this.autocomplete_wrapper }, this.setAutoCompleteWrapperPosition = function () { var t = this.getAutoCompleteWrapper(), e = this.$container.find(".target-input"), i = e.offset(), l = e.height(); t.css("width", e.width() + 2 + "px"), t.css("max-height", 50 * this.page_limit + "px"), t.css("left", i.left); var a = t.height(), n = $(document).height() - i.top - l - $("#footer").height(); a > n ? (t.css("top", i.top - a - 2 + "px"), t.css({ "border-top-width": "1px", "border-bottom-width": "0px" })) : (t.css("top", i.top + l + 2 + "px"), t.css({ "border-top-width": "0px", "border-bottom-width": "1px" })) }, this.setConfirmHook = function (t) { for (var e = t.split("."), i = e.pop(), l = window, a = 0; a < e.length; a++)l = l[e[a]]; var n = l[i]; if ("function" != typeof n) throw "non-existent function specified for TargetSelection on-choice"; this.on_confirm_village = n }, this.confirmVillage = function (t) { this.removeConfirmedVillage(), this.getAutoCompleteWrapper().hide(); var e = this.$container.find(".target-input"); e.find("input").hide(), e.append(t), t.removeClass("village-selected"), this.confirmed_village_data = t.data("village_data"), this.updateURLForConfirmedVillage(), this.on_confirm_village(this.confirmed_village_data) }, this.removeConfirmedVillage = function () { var t = this.$container.find(".target-input"); t.find(".village-item").length && (t.find("input").show().val("").focus(), t.find(".village-item").remove(), this.confirmed_village_data = !1, $("input[name=x], input[name=y]").val(""), this.updateURLForConfirmedVillage()) }, this.getVillageDiv = function (t) { var i = $('<div class="village-item"><img class="village-delete" alt="" /><img class="village-picture" alt="" /><span class="village-name"></span><span class="village-info"></span><span class="village-distance"></span></div>').data("village_data", t); this.read_only || i.on("click", function (t) { t.stopPropagation(), $(this).parent().hasClass("target-select-autocomplete") ? e.confirmVillage(i) : e.removeConfirmedVillage() }); var l = t.name; l.length > 18 && (l = l.substr(0, 18) + "&hellip;"); var a = s("%1 (%2|%3)", l, t.x, t.y), n = t.player_name ? t.player_name : "Barbár", o = "<strong>Tulajdonos:</strong> " + n + " <strong>Pontok:</strong> " + t.points, r = Math.round(Math.sqrt(t.distance)), c = 1 === r ? s("%1 mező", r) : s("%1 mező", r), h = "<strong>Távolság:</strong> " + c; return i.find(".village-picture").attr("src", t.image), i.find(".village-delete").attr("src", image_base + "/delete.png"), i.find(".village-name").html(a), i.find(".village-info").html(o), i.find(".village-distance").html(h), this.read_only && i.addClass("read-only"), i }, this.textFieldKeyUp = function (t) { e.ie_compatibility_mode && 38 !== t.keyCode && 40 !== t.keyCode && e.fetchVillages(); var i = $(this), l = i.val(); return "coord" === i.data("search-type") && (l = l.replace(/[,\.]/, "|"), l = l.replace(/[^[0-9\|]+/, ""), 3 === l.length && 8 !== t.keyCode && 46 !== t.keyCode && (l += "|"), l.indexOf("||") !== -1 && (l = l.replace(/(\|{2,})/, "|")), l.length > 7 && (l = l.substr(0, 7)), i.val(l)), !0 }, this.textFieldKeyDown = function (t) { return 38 === t.keyCode ? (e.selectPrevVillage(), !1) : 40 === t.keyCode ? (e.selectNextVillage(), !1) : 13 !== t.keyCode || (e.confirmVillageAtIndex(e.selected_index), !1) }, this.selectNextVillage = function () { null === this.selected_index ? this.selectVillageAtIndex(0) : this.selected_index + 1 <= this.num_villages && this.selectVillageAtIndex(this.selected_index + 1) }, this.selectPrevVillage = function () { null !== this.selected_index && this.selected_index > 0 && this.selectVillageAtIndex(this.selected_index - 1) }, this.selectVillageAtIndex = function (t) { this.unselectSelectedVillage(); var e = this.getAutoCompleteWrapper().find("div").eq(t); e.addClass("village-selected"), this.selected_index = t; var i = 41 * t, l = e.position().top, a = parseInt(e.parent().css("max-height")); l < 10 ? e.parent().scrollTop(i) : l > a - 40 && e.parent().scrollTop(i) }, this.unselectSelectedVillage = function () { this.getAutoCompleteWrapper().find("div.village-selected").removeClass("village-selected") }, this.confirmVillageAtIndex = function (t) { var e = this.getAutoCompleteWrapper().find("div").eq(t); e.length && (e.hasClass("village-more") ? (this.loadMoreVillages(), this.selectVillageAtIndex(t - 1)) : this.confirmVillage(e)) }, this.updateURLForConfirmedVillage = function () { var t = this.confirmed_village_data ? this.confirmed_village_data : { id: 0 }, e = document.location.href; "#" === e.substr(-1) && (e = e.substr(0, e.length - 1)); var i = /target=([0-9]+)/; e.match(i) ? e = e.replace(i, "target=" + t.id) : e += "&target=" + t.id, Modernizr.history && history.replaceState({}, "", e) }, this.loadMoreVillages = function () { this.fetchVillages({ offset: this.num_villages }) }, this.construct(t) }, TargetSelection.loadTargetsPopup = function (t, e) { UI.AjaxPopup(t, "village_targets", e, "Célpontok", null, { reload: !0 }, null, 400) } }();
